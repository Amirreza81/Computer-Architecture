// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/04/2023 19:45:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AluC_Control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AluC_Control_vlg_sample_tst(
	Op0,
	Op1,
	Op2,
	Op3,
	Op4,
	Op5,
	Op26,
	Op27,
	Op28,
	Op29,
	Op30,
	Op31,
	sampler_tx
);
input  Op0;
input  Op1;
input  Op2;
input  Op3;
input  Op4;
input  Op5;
input  Op26;
input  Op27;
input  Op28;
input  Op29;
input  Op30;
input  Op31;
output sampler_tx;

reg sample;
time current_time;
always @(Op0 or Op1 or Op2 or Op3 or Op4 or Op5 or Op26 or Op27 or Op28 or Op29 or Op30 or Op31)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AluC_Control_vlg_check_tst (
	ALU_src,
	Branch,
	J,
	MemRead,
	MemtoReg,
	MemWrite,
	operation,
	RegDest,
	RegWrite,
	sampler_rx
);
input  ALU_src;
input  Branch;
input  J;
input  MemRead;
input  MemtoReg;
input  MemWrite;
input [3:0] operation;
input  RegDest;
input  RegWrite;
input sampler_rx;

reg  ALU_src_expected;
reg  Branch_expected;
reg  J_expected;
reg  MemRead_expected;
reg  MemtoReg_expected;
reg  MemWrite_expected;
reg [3:0] operation_expected;
reg  RegDest_expected;
reg  RegWrite_expected;

reg  ALU_src_prev;
reg  Branch_prev;
reg  J_prev;
reg  MemRead_prev;
reg  MemtoReg_prev;
reg  MemWrite_prev;
reg [3:0] operation_prev;
reg  RegDest_prev;
reg  RegWrite_prev;

reg  ALU_src_expected_prev;
reg  Branch_expected_prev;
reg  J_expected_prev;
reg  MemRead_expected_prev;
reg  MemtoReg_expected_prev;
reg  MemWrite_expected_prev;
reg [3:0] operation_expected_prev;
reg  RegDest_expected_prev;
reg  RegWrite_expected_prev;

reg  last_ALU_src_exp;
reg  last_Branch_exp;
reg  last_J_exp;
reg  last_MemRead_exp;
reg  last_MemtoReg_exp;
reg  last_MemWrite_exp;
reg [3:0] last_operation_exp;
reg  last_RegDest_exp;
reg  last_RegWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_src_prev = ALU_src;
	Branch_prev = Branch;
	J_prev = J;
	MemRead_prev = MemRead;
	MemtoReg_prev = MemtoReg;
	MemWrite_prev = MemWrite;
	operation_prev = operation;
	RegDest_prev = RegDest;
	RegWrite_prev = RegWrite;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_src_expected_prev = ALU_src_expected;
	Branch_expected_prev = Branch_expected;
	J_expected_prev = J_expected;
	MemRead_expected_prev = MemRead_expected;
	MemtoReg_expected_prev = MemtoReg_expected;
	MemWrite_expected_prev = MemWrite_expected;
	operation_expected_prev = operation_expected;
	RegDest_expected_prev = RegDest_expected;
	RegWrite_expected_prev = RegWrite_expected;
end



// expected ALU_src
initial
begin
	ALU_src_expected = 1'bX;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
end 

// expected J
initial
begin
	J_expected = 1'bX;
end 

// expected MemRead
initial
begin
	MemRead_expected = 1'bX;
end 

// expected MemtoReg
initial
begin
	MemtoReg_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 
// expected operation[ 3 ]
initial
begin
	operation_expected[3] = 1'bX;
end 
// expected operation[ 2 ]
initial
begin
	operation_expected[2] = 1'bX;
end 
// expected operation[ 1 ]
initial
begin
	operation_expected[1] = 1'bX;
end 
// expected operation[ 0 ]
initial
begin
	operation_expected[0] = 1'bX;
end 

// expected RegDest
initial
begin
	RegDest_expected = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 
// generate trigger
always @(ALU_src_expected or ALU_src or Branch_expected or Branch or J_expected or J or MemRead_expected or MemRead or MemtoReg_expected or MemtoReg or MemWrite_expected or MemWrite or operation_expected or operation or RegDest_expected or RegDest or RegWrite_expected or RegWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_src = %b | expected Branch = %b | expected J = %b | expected MemRead = %b | expected MemtoReg = %b | expected MemWrite = %b | expected operation = %b | expected RegDest = %b | expected RegWrite = %b | ",ALU_src_expected_prev,Branch_expected_prev,J_expected_prev,MemRead_expected_prev,MemtoReg_expected_prev,MemWrite_expected_prev,operation_expected_prev,RegDest_expected_prev,RegWrite_expected_prev);
	$display("| real ALU_src = %b | real Branch = %b | real J = %b | real MemRead = %b | real MemtoReg = %b | real MemWrite = %b | real operation = %b | real RegDest = %b | real RegWrite = %b | ",ALU_src_prev,Branch_prev,J_prev,MemRead_prev,MemtoReg_prev,MemWrite_prev,operation_prev,RegDest_prev,RegWrite_prev);
`endif
	if (
		( ALU_src_expected_prev !== 1'bx ) && ( ALU_src_prev !== ALU_src_expected_prev )
		&& ((ALU_src_expected_prev !== last_ALU_src_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_src :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_src_expected_prev);
		$display ("     Real value = %b", ALU_src_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_src_exp = ALU_src_expected_prev;
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( J_expected_prev !== 1'bx ) && ( J_prev !== J_expected_prev )
		&& ((J_expected_prev !== last_J_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port J :: @time = %t",  $realtime);
		$display ("     Expected value = %b", J_expected_prev);
		$display ("     Real value = %b", J_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_J_exp = J_expected_prev;
	end
	if (
		( MemRead_expected_prev !== 1'bx ) && ( MemRead_prev !== MemRead_expected_prev )
		&& ((MemRead_expected_prev !== last_MemRead_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemRead_expected_prev);
		$display ("     Real value = %b", MemRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemRead_exp = MemRead_expected_prev;
	end
	if (
		( MemtoReg_expected_prev !== 1'bx ) && ( MemtoReg_prev !== MemtoReg_expected_prev )
		&& ((MemtoReg_expected_prev !== last_MemtoReg_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_expected_prev);
		$display ("     Real value = %b", MemtoReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MemtoReg_exp = MemtoReg_expected_prev;
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( operation_expected_prev[0] !== 1'bx ) && ( operation_prev[0] !== operation_expected_prev[0] )
		&& ((operation_expected_prev[0] !== last_operation_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_operation_exp[0] = operation_expected_prev[0];
	end
	if (
		( operation_expected_prev[1] !== 1'bx ) && ( operation_prev[1] !== operation_expected_prev[1] )
		&& ((operation_expected_prev[1] !== last_operation_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_operation_exp[1] = operation_expected_prev[1];
	end
	if (
		( operation_expected_prev[2] !== 1'bx ) && ( operation_prev[2] !== operation_expected_prev[2] )
		&& ((operation_expected_prev[2] !== last_operation_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_operation_exp[2] = operation_expected_prev[2];
	end
	if (
		( operation_expected_prev[3] !== 1'bx ) && ( operation_prev[3] !== operation_expected_prev[3] )
		&& ((operation_expected_prev[3] !== last_operation_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_operation_exp[3] = operation_expected_prev[3];
	end
	if (
		( RegDest_expected_prev !== 1'bx ) && ( RegDest_prev !== RegDest_expected_prev )
		&& ((RegDest_expected_prev !== last_RegDest_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDest :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDest_expected_prev);
		$display ("     Real value = %b", RegDest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDest_exp = RegDest_expected_prev;
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AluC_Control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Op0;
reg Op1;
reg Op2;
reg Op3;
reg Op4;
reg Op5;
reg Op26;
reg Op27;
reg Op28;
reg Op29;
reg Op30;
reg Op31;
// wires                                               
wire ALU_src;
wire Branch;
wire J;
wire MemRead;
wire MemtoReg;
wire MemWrite;
wire [3:0] operation;
wire RegDest;
wire RegWrite;

wire sampler;                             

// assign statements (if any)                          
AluC_Control i1 (
// port map - connection between master ports and signals/registers   
	.ALU_src(ALU_src),
	.Branch(Branch),
	.J(J),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.Op0(Op0),
	.Op1(Op1),
	.Op2(Op2),
	.Op3(Op3),
	.Op4(Op4),
	.Op5(Op5),
	.Op26(Op26),
	.Op27(Op27),
	.Op28(Op28),
	.Op29(Op29),
	.Op30(Op30),
	.Op31(Op31),
	.operation(operation),
	.RegDest(RegDest),
	.RegWrite(RegWrite)
);

// Op5
initial
begin
	Op5 = 1'b1;
	Op5 = #990000 1'b0;
end 

// Op4
initial
begin
	Op4 = 1'b0;
end 

// Op3
initial
begin
	Op3 = 1'b0;
	Op3 = #230000 1'b1;
	Op3 = #80000 1'b0;
end 

// Op2
initial
begin
	Op2 = 1'b0;
	Op2 = #90000 1'b1;
	Op2 = #140000 1'b0;
end 

// Op1
initial
begin
	Op1 = 1'b0;
	Op1 = #40000 1'b1;
	Op1 = #50000 1'b0;
	Op1 = #140000 1'b1;
	Op1 = #80000 1'b0;
end 

// Op0
initial
begin
	Op0 = 1'b0;
	Op0 = #160000 1'b1;
	Op0 = #70000 1'b0;
end 

// Op31
initial
begin
	Op31 = 1'b0;
	Op31 = #310000 1'b1;
	Op31 = #250000 1'b0;
end 

// Op30
initial
begin
	Op30 = 1'b0;
end 

// Op29
initial
begin
	Op29 = 1'b0;
	Op29 = #450000 1'b1;
	Op29 = #110000 1'b0;
end 

// Op28
initial
begin
	Op28 = 1'b0;
	Op28 = #560000 1'b1;
	Op28 = #150000 1'b0;
end 

// Op27
initial
begin
	Op27 = 1'b0;
	Op27 = #310000 1'b1;
	Op27 = #250000 1'b0;
end 

// Op26
initial
begin
	Op26 = 1'b0;
	Op26 = #310000 1'b1;
	Op26 = #250000 1'b0;
end 

AluC_Control_vlg_sample_tst tb_sample (
	.Op0(Op0),
	.Op1(Op1),
	.Op2(Op2),
	.Op3(Op3),
	.Op4(Op4),
	.Op5(Op5),
	.Op26(Op26),
	.Op27(Op27),
	.Op28(Op28),
	.Op29(Op29),
	.Op30(Op30),
	.Op31(Op31),
	.sampler_tx(sampler)
);

AluC_Control_vlg_check_tst tb_out(
	.ALU_src(ALU_src),
	.Branch(Branch),
	.J(J),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.operation(operation),
	.RegDest(RegDest),
	.RegWrite(RegWrite),
	.sampler_rx(sampler)
);
endmodule

